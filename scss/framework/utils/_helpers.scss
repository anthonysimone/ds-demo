////
/// @group Utility
////


/// Return a map from the specified key. Optionally specify a sub key.
/// Works similarly to map-get but with support for sub keys.
/// @param {map} $map
/// @param {string} $key - The map key to retrieve.
/// @param {string} $sub-key [null] - A sub-key of $key
/// @returns {*|null} The value of the supplied key
@function key($map, $key, $sub-key: null) {
  @if map-has-key($map, $key) {
    $val: map-get($map, $key);

    @if $sub-key and map-has-key($val, $sub-key) {
      $val: map-get($val, $sub-key);
    }

    @return $val;
  }

  @warn "Unknown '#{$key}' in '#{$map}'.";
  @return null;
}


/// Allows for sub-maps of configuration maps to extend other sub-maps.
///
/// Example:
///   $conf-map: (
///     base-config: (
///       color: red,
///       size: large
///     ),
///     red-button: (
///       extend: base-config,
///       arrow: true
///     )
///   );
@function extend-in-map($map-to-search, $sub-map-key) {
  $map-to-merge: key($map-to-search, $sub-map-key);

  @if (map-has-key($map-to-merge, extend)) {
    $key-of-map-to-extend: map-get($map-to-merge, extend);

    @if (map-has-key($map-to-search, $key-of-map-to-extend)) {
      @return map-merge(key($map-to-search, $key-of-map-to-extend), $map-to-merge);
    }
  }

  @return $map-to-merge;
}


$z-layers: (
  bottomless-pit: -9999,
  default: 0,
  debug: 1000
) !default;

/// Retrieve the z-index from $z-layers.
/// @see $z-layers
@function z($key, $sub-key: null) {
  @return key($z-layers, $key, $sub-key);
}


/// Store groups of commonly used selectors
/// @group Selectors
/// @see selector-group
$selectors: (
  headers: 'h1, h2, h3, h4, h5, h6',
  active: '&:hover, &:focus, &:active',
  text-inputs: 'textarea, [type="text"], [type="search"], [type="password"], [type="email"], [type="phone"]',
  buttons: '[type="button"], [type="submit"], button'
) !default;

/// Include a named group of selectors
@mixin selector-group($name) {
  #{key($selectors, $name)} {
    @content;
  }
}


/// Helper function to replace characters in a string
/// Explanation found - https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
/// @param {String} $string - The string to search (haystack).
/// @param {String} $search - The string to search for (needle).
/// @param {String} $replace - The string to replace with each instance of the needle.
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index +
            str-length($search)), $search, $replace);
  }
  @return $string;
}


/// Function to create an optimized svg url
/// @param {String} $svg - The svg to optimize.
@function svg-url($svg){
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode (may need a few extra replacements)
    //
    $chunk: str-replace($chunk,'"','\'');
    $chunk: str-replace($chunk,'<','%3C');
    $chunk: str-replace($chunk,'>','%3E');
    $chunk: str-replace($chunk,'&','%26');
    $chunk: str-replace($chunk,'#','%23');
    $chunk: str-replace($chunk,'(','%28');
    $chunk: str-replace($chunk,')','%29');
    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml;charset=utf8,#{$encoded}");
}